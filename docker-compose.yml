services:
  downloader:
    build:
      context: ./downloader
      dockerfile: Dockerfile
    container_name: imdb_downloader
    volumes:
      - ./data:/imdb-data-pipeline/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    profiles:
      - all
    restart: "no"

  loader:
    build:
      context: ./loader
      dockerfile: Dockerfile
    container_name: imdb_loader
    depends_on:
      - postgres
    environment:
      DATA_DIR: /imdb-data-pipeline/data
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    profiles:
      - all
    restart: "no"
    volumes:
      - ./data:/imdb-data-pipeline/data

  postgres:
    image: postgres:16
    container_name: postgres_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - data:/imdb-data-pipeline/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    profiles:
      - all
      - manual

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: imdb_api
    depends_on:
      - postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
    ports:
      - "8000:8000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    profiles:
      - all
      - manual

volumes:
  pgdata:
  data:
